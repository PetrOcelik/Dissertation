################################################################################################################
# The script returns the data frames of matched codes and saves them into *.csv files 
# The function pairs outputs from RQDA of 2 coders based on intersections of respective coded segments of text
# If there is an intersection of 2 same codes, the codes are matched
# If there is an intersection of 2 different codes, the codes are matched
# If there is an intersection of more than 2 codes: 
# (1) the same codes are matched at first
# (2) the different codes remain in the original order
# If there is not an intersection (the code does not have its counterpart), the code is matched with 0/NA values
################################################################################################################

#----------matching function----------

sortAnnotations <- function(matrixA, matrixB)

  # Jiri Fejfar (6-7-2014)
  # edit: Petr Ocelik (29-7-2014)
  
{
  colnames(matrixA) <- c("start", "end", "cid", "codename", "length", "fid", "rowid", "filename")
  colnames(matrixB) <- c("start", "end", "cid", "codename", "length", "fid", "rowid", "filename")
  
  sortMatrixA = matrixA[order(matrixA[,1]),]
  sortMatrixA$id = seq_len(nrow(sortMatrixA))
  sortMatrixB = matrixB[order(matrixB[,1]),]
  sortMatrixB$id = seq_len(nrow(sortMatrixB))
  
  sortMatrixA$matched_c2c=FALSE
  sortMatrixB$matched_c2c=FALSE
  
  sortMatrixA$matched_u2u=FALSE
  sortMatrixB$matched_u2u=FALSE
  
  sortMatrixA$matched_u2c=FALSE
  sortMatrixB$matched_u2c=FALSE
  
  #----------find CORRECTLY matched (CORRECT TO CORRECT)----------
  
  # Cartesian product
  M = merge (sortMatrixA, sortMatrixB, by.x=NULL, by.y=NULL, all.y=TRUE)
  
  # Match conditions:
  # position
  a1 = (M["start.x"] >= M["start.y"]) & (M["end.x"] <= M["end.y"])
  a2 = (M["start.x"] <= M["start.y"]) & (M["end.x"] >= M["end.y"])
  
  a3 = (M["start.x"] < M["start.y"] & M["end.x"] >  M["start.y"] & M["end.x"] <  M["end.y"] )
  a4 = (M["start.y"] < M["start.x"] & M["end.y"] >  M["start.x"] & M["end.y"] <  M["end.x"] )
  
  # label
  a5 = M["cid.x"] == M["cid.y"]
  
  # create logical index vector
  a_c2c = ( a1 | a2 | a3 | a4 ) & a5
  
  # set column matched_c2c to TRUE
  sortMatrixA[M[a_c2c, "id.x"], "matched_c2c"] = TRUE
  sortMatrixB[M[a_c2c, "id.y"], "matched_c2c"] = TRUE
  
  #----------find UNCORRECTLY matched (UNCORRECT TO UNCORRECT)----------
  # Cartesian product with new values
  M = merge (sortMatrixA, sortMatrixB, by.x=NULL, by.y=NULL, all.y=TRUE)
  
  # are not correctly matched
  a6 = (!M["matched_c2c.x"] & !M["matched_c2c.y"])
  
  # create logical index vector
  a_u2u_orig = ( a1 | a2 | a3 | a4 ) & a6
  a_u2u <- a_u2u_orig
  
  # remove "cross" pairs
  for (m in 1:(length(a_u2u)-1)){ 
    if(a_u2u[m]==TRUE){
      idx <- M[m,"cid.x"]
      idy <- M[m,"cid.y"]
      startx <- M[m,"start.x"]
      starty <- M[m,"start.y"]
      endx <- M[m,"end.x"]
      endy <- M[m,"end.y"]
      for (n in (m+1):length(a_u2u)){
        if(a_u2u[n]==TRUE){
          if(M[n,"start.x"]==startx & M[n,"start.y"]==starty & M[n,"end.x"]==endx & M[n,"end.y"]==endy){
            if(M[n,"cid.x"]==idx || M[n,"cid.y"]==idy){
              a_u2u[n]=FALSE
            }  
          }
        }
      }
    }
  }
  
  # set column matched_u2u to TRUE
  sortMatrixA[M[a_u2u, "id.x"], "matched_u2u"] = TRUE
  sortMatrixB[M[a_u2u, "id.y"], "matched_u2u"] = TRUE
  
  # add "cross" pairs if they have no other pair
  for (k in 1:(length(a_u2u))){
    if (a_u2u_orig[k] == TRUE & a_u2u[k] == FALSE){
      if (sortMatrixA[M[k, "id.x"], "matched_u2u"] == FALSE || sortMatrixB[M[k, "id.y"], "matched_u2u"] == FALSE ){
        a_u2u[k] = TRUE
        sortMatrixA[M[k, "id.x"], "matched_u2u"] = TRUE
        sortMatrixB[M[k, "id.y"], "matched_u2u"] = TRUE
      }  
    }
  }
  
  #----------find UNCORRECTLY matched (UNCORRECT TO CORRECT)----------
  
  # Cartesian product with new values
  M <- merge(sortMatrixA, sortMatrixB, by.x=NULL, by.y=NULL, all.y=TRUE)
  
  # are not correctly matched
  a7a <- (!M["matched_c2c.x"] & !M["matched_u2u.x"])
  a7b <- (!M["matched_c2c.y"] & !M["matched_u2u.y"])
  a7 <- a7a + a7b
  
  # create logical index vector
  a_u2c_orig <- ( a1 | a2 | a3 | a4 ) & a7
  a_u2c <- a_u2c_orig
  
  # remove "cross" pairs
  for (m in 1:(length(a_u2c)-1)){ 
    if(a_u2c[m]==TRUE){
      idx <- M[m,"cid.x"]
      idy <- M[m,"cid.y"]
      startx <- M[m,"start.x"]
      starty <- M[m,"start.y"]
      endx <- M[m,"end.x"]
      endy <- M[m,"end.y"]
      for (n in (m+1):length(a_u2c)){
        if(a_u2c[n]==TRUE){
          if(M[n,"start.x"]==startx & M[n,"start.y"]==starty & M[n,"end.x"]==endx & M[n,"end.y"]==endy){
            if(M[n,"cid.x"]==idx || M[n,"cid.y"]==idy){
              a_u2c[n]=FALSE
            }  
          }
        }
      }
    }
  }
  
  # set column matched_u2u to TRUE
  sortMatrixA[M[a_u2c, "id.x"], "matched_u2c"] = TRUE
  sortMatrixB[M[a_u2c, "id.y"], "matched_u2c"] = TRUE
  
  #----------find UNMATCHED----------
  
  M <- merge(sortMatrixA, sortMatrixB, by.x=NULL, by.y=NULL, all.y=TRUE)
  
  # create NA dataframe
  NADataFrame <- data.frame(0, 0, 0, 0, 0, 0, 0, 0, 0, FALSE, FALSE, FALSE)
  colnames(NADataFrame) <- c("start", "end", "cid", "codename", "length", "fid", "rowid", "filename", "id", "matched_c2c", "matched_u2u", "matched_u2c")
  
  # create combined NA results
  naa <- sortMatrixA[sortMatrixA$matched_c2c==FALSE & sortMatrixA$matched_u2u==FALSE & sortMatrixA$matched_u2c==FALSE,]
  nab <- sortMatrixB[sortMatrixB$matched_c2c==FALSE & sortMatrixB$matched_u2u==FALSE & sortMatrixB$matched_u2c==FALSE,]
  NAA <- merge(naa, NADataFrame, by.x=NULL, by.y=NULL, all.y=TRUE)
  NAB <- merge(NADataFrame, nab, by.x=NULL, by.y=NULL, all.y=TRUE)
  
  #----------bind all together----------
  
  # result = list(sortMatrixA, sortMatrixB)
  result <- rbind(M[a_c2c,], M[a_u2u,], M[a_u2c,], NAA, NAB)
  return(result)
}

#----------data processing----------

# loading attribute data

setwd("...data/live_data/live_1/attribute_data")
list1 <- list.files(pattern="1_live_1_attribute.csv")
list2 <- list.files(pattern="2_live_1_attribute.csv")  

for(i in list1) for(j in list2) if(substr(i,1,7) == substr(j,1,7)) {
  
  setwd("...data/live_data/live_1/attribute_data")
  x <- read.csv(i, header=TRUE)
  x <- x[,c(6,7,2,4,8,3,5,1)]
  y <- read.csv(j, header=TRUE)
  y <- y[,c(6,7,2,4,8,3,5,1)]
  
  data <- sortAnnotations(x, y)
  rdata <- sortAnnotations(x, y)
  diag <- data
  diag <- diag[,c(3,4,1,2,5,15,16,13,14,17)]
  diag <- diag[order(diag[,3]),]
  
  data <- data[order(data[,1]),] 
  data <- na.omit(data[c(data$matched_c2c.x == TRUE & data$matched_u2u.x == FALSE & data$matched_u2c.x == FALSE &  #condition selects correct to correct matches
                         data$matched_c2c.y == TRUE & data$matched_u2u.y == FALSE & data$matched_u2c.y == FALSE #if there is a correct code matched to multiple correct codes, complement correct codes are created
                         # condition selects correct to correct matches nested within multiple correct/uncorrect matches
                         | ((data$matched_c2c.x == TRUE & data$matched_u2u.x == FALSE & data$matched_u2c.x == TRUE &  
                             data$matched_c2c.y == TRUE & data$matched_u2u.y == FALSE & data$matched_u2c.y == FALSE) 
                         |  (data$matched_c2c.x == TRUE & data$matched_u2u.x == FALSE & data$matched_u2c.x == FALSE &  
                             data$matched_c2c.y == TRUE & data$matched_u2u.y == FALSE & data$matched_u2c.y == TRUE))
  ),])
  data <- data[,c(3,4,1,2,5,15,16,13,14,17)] #omitted columns 6 and 18 indicate file ids: for individual files are always 1 
  data <- data[order(data[,2]),] #aplhabetically orders codes
  z <- data
      
  #----------working data---------
  
  dname <- paste(i, sep="")
  dname <- substr(dname, 1, nchar(dname)-21)
  dname <- paste(dname, "2_live_1_working", sep="")
  assign(dname, data)
 
  # saving working data (agreed observations only)
  # three types of observation pairs (code-code, code-uncoded segment, code-multiple codes)
  # computationally there is no difference between pairing of a code to uncoded segments 
  # and pairing of a code to more than one code
  
  setwd("...data/live_data/live_1/working_data")
  write.csv(data, file=paste(dname, ".csv", sep=""), row.names=F)
  
  # extracting code frequencies in individual files
  
  freq <- as.data.frame(table(data[,2])) #counting the codes frequencies
  nonzero <- freq[,2]!=0 #selects unobserved codes
  freq <- freq[nonzero,] #subsets unobserved codes
  freq <- freq[order(freq[,1]),]
  colnames(freq) <- c("codename", "frequency")
  fname <- paste(i) 
  fname <- substr(fname, 1, nchar(fname)-21) 
  fname <- paste(fname, "2_live_1_frequency", sep="")
  assign(fname, freq)
  
  setwd("...data/live_data/live_1/working_data/frequency")
  write.csv(freq, file=paste(fname, ".csv", sep=""), row.names=F)
  
  # saving reduced working data (without duplicities in codenames, filenames and with average values for star, end and length)
  # these data are used as attribute data
  
  # calculating average values for position (start & end) and length of the codes
  start <- round(c(z$start.x+z$start.y)/2) 
  z$start <- start
  end <- round(c(z$end.x+z$end.y)/2) 
  z$end <- end
  length <- round(c(z$length.x+z$length.y)/2) 
  z$length <- length
  z <- z[,c(1,2,11,12,13)]
  z <- z[,c(1,2,3,4,5)]
  colnames(z)[1] <- "cid"
  colnames(z)[2] <- "codename"
      
  zname <- paste(i, sep="")
  zname <- substr(zname, 1, nchar(zname)-21)
  zname <- paste(zname, "2_live_1_reduced", sep="")
  z <- z[order(z[,2]),]
  assign(zname, z)
  setwd("...data/live_data/live_1/working_data/reduced")
  write.csv(z, file=paste(zname, ".csv", sep=""), row.names=F)

  #----------inter-coder reliability data---------
  
  # saving inter-coder reliability data (all observation pairs of both coders) of two coders

  rdata <- rdata[order(rdata[,1]),]
  rdata <- rdata[,c(3,15)]
  rname <- paste(i, sep="")
  rname <- substr(rname, 1, nchar(rname)-21)
  rname <- paste(rname, "2_live_1_inter.reliability", sep="")
  assign(rname, rdata)
  
  setwd("...data/live_data/live_1/reliability_data/inter_rel_data/12")
  write.csv(rdata, file=paste(rname, ".csv", sep=""), row.names=F)

  # saving diagnostic data
  
  diname <- paste(i, sep="")
  diname <- substr(diname, 1, nchar(diname)-21)
  diname <- paste(diname, "2_live_1_inter.reliability.diagnostics", sep="")
  assign(diname, diag)
  
  setwd("...data/live_data/live_1/reliability_data/inter_rel_data/diagnostics")
  write.csv(diag, file=paste(diname, ".csv", sep=""), row.names=F)
  
  # saving data for individual coders if needed

  rdata1 <- rdata[,1]
  rname1 <- paste(i, sep="")
  rname1 <- substr(rname1, 1, nchar(rname1)-22)
  rname1 <- paste(rname1, "1_live_1_inter.reliability", sep="")
  assign(rname1, rdata1)
  setwd("...data/live_data/live_1/reliability_data/inter_rel_data/1")
  write.csv(rdata1, file=paste(rname1, ".csv", sep=""), row.names=F)

  rdata2 <- rdata[,2]
  rname2 <- paste(j, sep="")
  rname2 <- substr(rname2, 1, nchar(rname2)-22)  
  rname2 <- paste(rname2, "2_live_1_inter.reliability", sep="")
  assign(rname2, rdata2)
  setwd("...data/live_data/live_1/reliability_data/inter_rel_data/2")
  write.csv(rdata2, file=paste(rname2, ".csv", sep=""), row.names=F)
}

# n files

path <- ("...data/live_data/live_1/reliability_data/inter_rel_data/12")

data1 <- function(path) { 
  files1 <- dir(path, pattern ="12_live_1_inter.reliability.csv", full.names = TRUE)
  tables1 <- lapply(files1, read.csv)
  data1 <- do.call(rbind, tables1)
}
data1 <- data1("...data/live_data/live_1/reliability_data/inter_rel_data/12")

n <- length(dir(path, pattern ="12_live_1_inter.reliability.csv", full.names = TRUE))
name1 <- paste("n_", n, sep="")
name1 <- paste(name1, "_12_live_1_inter.reliability", sep="")
setwd("...data/live_data/live_1/reliability_data/inter_rel_data/12_n")
write.csv(data1, file=paste(name1, ".csv", sep=""), row.names=F)
