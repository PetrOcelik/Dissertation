################################################################################################################
# The script extracts networks (vertex and edge) subgraphs and visualise them. Specifically:
# (1) bipartite network and its vertex subgraph
# (2) code network and its vertex and edge subgraphs
# (3) actor network and its vertex and edge subgraphs
################################################################################################################

# loading libraries 

library(bipartite); library(statnet); library(data.table); library(network)

#----------relational data processing----------

setwd("...data/live_data/live_1/twomode_data")
list <- list.files(pattern="twomode_matrix.csv")
list <- list[order(nchar(list), list)]
n <- length(list)
cam <- as.data.frame(read.csv(list[[n]], header=T)) #codes by actors matrix (cam)
rownames(cam) <- cam$X
cam$X <- NULL

cam <- as.matrix(cam) #incidence (codes by actors) matrix
code.m <- as.one.mode(cam, project="higher", weighted=TRUE) #codes cooccurence matrix 
actor.m <- as.one.mode(cam, project="lower", weighted=TRUE) #actors overlap matrix

# incidence matrices
plot.sociomatrix(cam) 

# adjacency matrices
plot.sociomatrix(code.m) 
plot.sociomatrix(actor.m) 

#----------extracting vertex subgraphs (vsubg) of bipartite, code and actor networks----------

# assumption: weakly connected concepts are not shared by a larger number of actors
# by their removal only a little information is lost (plus interpretation is then easier)

cam.vsubg <- cam[,colSums(cam)>5] #only codes with degree centrality higher than 5 (which is: mean degree - sd)
code.vsubg <- as.one.mode(cam.vsubg, project="higher", weighted=TRUE) #reduced codes cooccurence matrix 
actor.vsubg <- as.one.mode(cam.vsubg, project="lower", weighted=TRUE) #reduced actor overlap matrix 

#----------extracting edge subgraphs (esubg) of code and actor networks----------

# assumption: edge subgraphs contains only strong ties; strong tie exists:
# (1) if the code observations are shared by larger than average number of actors (mean + sd) or
# (2) if the actors are linked via larger than average number of code obervations (mean + sd) 
# e.g. it reasonable to assume that actors that share 10 code obervations have a more similar understanding
# than actors than share only 2 code observation. 
# this allows to capture the most important tie configurations (a "backbone" of the network)

# one-mode projections

# codes
r.sum1 <- rowMeans(code.vsubg, na.rm = FALSE, dims = 1) #saving row means (i.e. average edge weights for respective concepts)
tres1 <- round(mean(r.sum1) + sd(r.sum1), 0) #defining treshold: mean edge weight + sd 
code.esubg <- code.vsubg #based on the vertex subgraph (does not include codes with degree < 5)
cp1 <- code.esubg < tres1 #boolean matrix (T: lower then cutpoint)
code.esubg[cp1==TRUE] <- 0 #if smaller than cutting point (T), then replaced by 0

# actors
r.sum2 <- rowMeans(actor.vsubg, na.rm = FALSE, dims = 1) 
tres2 <- round(mean(r.sum2) + sd(r.sum2), 0) 
actor.esubg <- actor.vsubg
cp2 <- actor.esubg < tres2 
actor.esubg[cp2==TRUE] <- 0

#----------subgraphs----------

# incidence matrix
plot.sociomatrix(cam.vsubg) #vertex subgraph

# subgraphs adjacency matrices
plot.sociomatrix(code.vsubg) #vertex subgraph
plot.sociomatrix(code.esubg) #edge subgraph

plot.sociomatrix(actor.vsubg) #vertex subgraph
plot.sociomatrix(actor.esubg) #edge subgraph

setwd("...data/live_data/live_1/analysis_data/network/whole")
write.csv(code.m, file=paste("n_47_live_1_code_net.csv", sep=""), row.names=F)
write.csv(actor.m, file=paste("n_47_live_1_actor_net.csv", sep=""), row.names=F)

setwd("...data/live_data/live_1/analysis_data/network/subgraph")
write.csv(code.vsubg, file=paste("n_47_live_1_code_vsubg.csv", sep=""), row.names=F)
write.csv(code.esubg, file=paste("n_47_live_1_code_esubg.csv", sep=""), row.names=F)
write.csv(actor.vsubg, file=paste("n_47_live_1_actor_vsubg.csv", sep=""), row.names=F)
write.csv(actor.esubg, file=paste("n_47_live_1_actor_esubg.csv", sep=""), row.names=F)

# bipartite networks
cam.net <- network(cam, valued = T, bipartite = T, directed = F) 
cam.net.vsubg <- network(cam.vsubg, valued = F, bipartite = T, directed = F)

setwd("...data/live_data/live_1/analysis_data/network/bipartite")
write.csv(cam, file=paste("n_47_live_1_bip_net.csv", sep=""), row.names=T)
write.csv(cam.vsubg, file=paste("n_47_live_1_bip_vsubg.csv", sep=""), row.names=T)

# one-mode networks
code.net <- network(code.m, valued = T, bipartite = F, directed = F) 
actor.net <- network(actor.m, valued = T, bipartite = F, directed = F)
code.net.vsubg <- network(code.vsubg, valued = T, bipartite = F, directed = F) 
actor.net.vsubg <- network(actor.vsubg, valued = T, bipartite = F, directed = F) 
code.net.esubg <- network(code.esubg, valued = T, bipartite = F, directed = F) 
actor.net.esubg <- network(actor.esubg, valued = T, bipartite = F, directed = F) 

#----------attributional data processing----------

#----------actor attributes (actor attitudes)----------

setwd("...data/live_data/live_1")
data <- read.csv("n_47_live_1_attitude.csv")

attitude <- as.character(data[,4])

attitude <- attitude 
attitude.bip  <- c(attitude, rep(NA, length(cam[1,]))) #for bipartite network (codes do not have attitudes)

# adds attributes to actor network
actor.net%v%'color' <- attitude
actor.net%v%'color' <- gsub("disagree", "orangered1", actor.net%v%'color')
actor.net%v%'color' <- gsub("neutral", "grey", actor.net%v%'color')
actor.net%v%'color' <- gsub("agree", "lightgreen", actor.net%v%'color')
actor.net%v%'color' <- gsub("nonavailable", "yellow2", actor.net%v%'color')

# actor networks (complete, vertex and edge subgraphs)

actor.list <- list(actor.net.vsubg, actor.net.esubg) #list of actor networks
actor.names <- ls(pattern="actor.net.") #gets object names as strings
count <- 0

for (i in actor.list) for (j in actor.names) { #function assignes vertex attribute (attitude)
count <- count + 1
i%v%'color' <- attitude #assigns an attitude attribute to each vertex
i%v%'color' <- gsub("disagree", "orangered1", i%v%'color') #assigns colors to attitude value
i%v%'color' <- gsub("neutral", "grey", i%v%'color')
i%v%'color' <- gsub("agree", "lightgreen", i%v%'color')
i%v%'color' <- gsub("nonavailable", "yellow2", i%v%'color')
assign(paste(j, "%v%'color'", sep=""), i%v%'color') #assigns attributes to listed networks
}

#----------code attributes (code lengths)----------

path <- ("...data/live_data/live_1/working_data/reduced")

data <- function(path) { 
  files <- dir(path, pattern ="reduced.csv", full.names = TRUE)
  tables <- lapply(files, read.csv)
  do.call(rbind, tables)
}
files <- dir(path, pattern ="reduced.csv", full.names = TRUE) #saving number of files

data <- data("...data/live_data/live_1/working_data/reduced")

# complete code network

l.data <- data.frame(data$codename, data$length)
length <- aggregate(.~data.codename, l.data, sum) #gives sum of length values for each code

i <- sapply(length, is.factor) #identifies factor columns
length[i] <- lapply(length[i], as.character) #converts to character string
length <- length[order(length[,1]),] #aplhabetically orders to match it with the code names
total.length <- sum(length[,2]) #total length of the coded corpus
share <- (length[,2]/total.length)*100 #share of each code on the coded corpus
length <- cbind(length, share) #table with the absolute and relative lengths
code.length <- length[,3]

#code lengths in bipartite networks

# vector for code lengths, actor nodes have all the same size (1), the size of actor nodes does not include info

# code lengths for unrestricted bipartite network
cam.length.table <- length
i <- sapply(cam.length.table , is.factor)
cam.length.table[i] <- lapply(cam.length.table[i], as.character) 
cam.length.table <- cam.length.table[order(cam.length.table[,1]),] 
cam.length <- c(rep(1, length(cam[,1])), (cam.length.table[,3]))
adeg <- degree(actor.net, gmode="freeman")
cam.length.adeg <- c(adeg/50, (cam.length.table[,3]))

# code lengths for a vertex subgraph of bipartite network
cam.vsubg.names <- as.data.frame(colnames(cam.vsubg))
colnames(cam.vsubg.names) <- "data.codename"
cam.vsubg.length.table <- merge(length, cam.vsubg.names, by.x="data.codename", by.y="data.codename")
cam.vsubg.share <- (cam.vsubg.length.table[,2]/total.length)*100
cam.vsubg.length.table <- cbind(cam.vsubg.length.table, cam.vsubg.share)
cam.vsubg.length <- c(rep(1, length(cam[,1])), (cam.vsubg.length.table[,3]))
adeg.vsubg <- degree(actor.net.vsubg, gmode="freeman")
cam.vsubg.length.adeg <- c(adeg.vsubg/50, (cam.vsubg.length.table[,3]))

# code lengths in vertex adn edge subgraphs code network
code.vsubg.length <- cam.vsubg.length.table[,3]

#----------plotting bipartite networks----------

# unrestricted bipartite network
gplot(cam.net, gmode="twomode", 
      mode="kamadakawai", interactive=F,  
      label=network.vertex.names(cam.net), boxed.labels=F, label.pos=5, label.cex=0.75,
      vertex.col=c(actor.net%v%'color', rep("lightblue", dim(cam)[2])),
      vertex.sides=c(rep(5, dim(cam)[1]), rep(20, dim(cam)[2])),
      vertex.cex=c(degree(actor.m, gmode="graph", ignore.eval=F)/100, length[,2]/10000),
      usearrows=F, edge.col="lightgrey")

# vertex subgraph of bipartite network
gplot(cam.net.vsubg, gmode="twomode", 
      mode="kamadakawai", interactive=F,  
      label=network.vertex.names(cam.net.vsubg), boxed.labels=F, label.pos=5, label.cex=0.75,
      vertex.col=c(actor.net%v%'color', rep(NA, dim(cam.vsubg)[2])),
      vertex.sides=c(rep(5, dim(cam.vsubg)[1]), rep(20, dim(cam.vsubg)[2])),
      vertex.cex=c(degree(actor.vsubg, gmode="graph", ignore.eval=F)/100, cam.vsubg.length.table[,2]/10000),
      usearrows=F, edge.col="lightgrey")

#----------plotting code networks----------

# unrestricted code network
gplot(code.net, gmode="graph", mode="kamadakawai", usearrows=F, 
      , label=network.vertex.names(as.network(code.net)), label.pos=5
      , vertex.col="lightblue", edge.col="lightgrey"
      , edge.lwd=scale(code.m)
      , vertex.cex=sqrt(code.length)
)
# vertex subgraph of code network
gplot(code.net.vsubg, gmode="graph", mode="kamadakawai", usearrows=F  
      , label=network.vertex.names(as.network(code.net.vsubg)), label.pos=5
      , vertex.col="lightblue", edge.col="lightgrey"
      , edge.lwd=scale(code.vsubg)
      , vertex.cex=sqrt(code.vsubg.length)
)

isol <- isolates(code.net.esubg)
# edge subgraph of code network
gplot(code.net.esubg[-isol, -isol], gmode="graph", mode="kamadakawai", usearrows=F,   
      , label=network.vertex.names(as.network(code.net.esubg[-isol,-isol])), label.pos=5, vertex.col="lightblue", edge.col="lightgrey"
      , edge.lwd=scale(code.esubg[-isol,-isol])
      , vertex.cex=sqrt(code.vsubg.length[-isol])
)

par(mfrow=c(1,2))
# unrestricted code network
gplot(code.net, gmode="graph", mode="kamadakawai", usearrows=F
      , label=network.vertex.names(as.network(code.net)), label.pos=5, vertex.col="lightblue", edge.col="lightgrey"
      , edge.lwd=code.m
      , vertex.cex=sqrt(code.length)
)
# edge subgraph of code network
gplot(code.net.esubg[-isol, -isol], gmode="graph", mode="kamadakawai", usearrows=F  
      , label=network.vertex.names(as.network(code.net.esubg[-isol,-isol])), label.pos=5, vertex.col="lightblue", edge.col="lightgrey"
      , edge.lwd=code.m[-isol,-isol]
      , vertex.cex=sqrt(code.vsubg.length[-isol])
)
par(mfrow=c(1,1))

#----------plotting actor networks----------

# unrestricted actor network
gplot(actor.net, gmode="graph", mode="kamadakawai", usearrows=F  
      , label=network.vertex.names(network(actor.net)), label.pos=5, vertex.sides=5, edge.col="lightgrey"
      , edge.lwd=scale(actor.m)
      , vertex.col=actor.net%v%'color'
      , vertex.cex=((degree(actor.m, gmode="graph", ignore.eval=F))/100)
)
# vertex subgraph of actor network
gplot(actor.net.vsubg, gmode="graph", mode="kamadakawai", usearrows=F 
      , label=network.vertex.names(network(actor.net.vsubg)), label.pos=5, vertex.sides=5, edge.col="lightgrey"
      , edge.lwd=scale(actor.vsubg)
      , vertex.col=actor.net%v%'color'
      , vertex.cex=((degree(actor.vsubg, gmode="graph", ignore.eval=F))/100)
)
# edge subgraph of actor network
gplot(actor.net.esubg, gmode="graph", mode="fruchtermanreingold", usearrows=F  
      , label=network.vertex.names(network(actor.net.esubg)), label.pos=5, vertex.sides=5, edge.col="lightgrey"
      , edge.lwd=scale(actor.esubg)
      , vertex.col=actor.net%v%'color'
      , vertex.cex=((degree(actor.esubg, gmode="graph", ignore.eval=F))/100)
)

position <- gplot(actor.net, gmode="graph", mode="kamadakawai")
par(mfrow=c(1,2))
# unrestricted actor network
gplot(actor.net, gmode="graph", mode="kamadakawai", usearrows=F, coord=position 
      , label=network.vertex.names(network(actor.net)), label.pos=5, vertex.sides=5, edge.col="lightgrey"
      , edge.lwd=actor.m
      , vertex.col=actor.net%v%'color'
      , vertex.cex=((degree(actor.m, gmode="graph", ignore.eval=F))/100)
)
# edge subgraph of actor network
gplot(actor.net.esubg, gmode="graph", mode="kamadakawai", usearrows=F, coord=position  
      , label=network.vertex.names(network(actor.net.esubg)), label.pos=5, vertex.sides=5, edge.col="lightgrey"
      , edge.lwd=scale(actor.esubg)
      , vertex.col=actor.net%v%'color'
      , vertex.cex=((degree(actor.esubg, gmode="graph", ignore.eval=F))/100)
)
par(mfrow=c(1,1))
